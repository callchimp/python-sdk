# coding: utf-8

"""
    Callchimp Public API

    ## Introduction👋 Introducing OpenAPI spec for doing almost anything in [callchimp.ai](https://callchimp.ai). CallChimp is a Gen AI Call Center Enhancing telecommunication with GPT-driven bulk calling. It is scalable, user-friendly, and customizable. Optimized for seamless integration and usability. ## API Categories📋 The APIs are divided in 7 categories listed below:   - Campaigns   - Supervisors   - Lists   - Subscribers   - Calls   - Phone Numbers   - Webhooks  ## API Operations✅ ### Campaign Operations    - List all Campaigns   - Create a Campaign   - Get Campaign by Id   - Delete Campaign by Id   - Update Campaign by Id   - Add Supervisors to Campaign by Id   - Remove Supervisors from Campaign by Id   - Upload audio file to Campaign by Id  ### Supervisor Operations    - List all Supervisors   - Create a Supervisor   - Get Supervisor by Id   - Delete Supervisor by Id   - Update Supervisor by Id   - Send OTP to Campaign by Id   - Verify Supervisor OTP by Id  ### List Operations    - List all Lists   - Create a List   - Get List by Id   - Delete List by Id   - Update List by Id  ### Subscriber Operations    - List all Subscribers   - Create one or more Subscriber(s)   - Get Subscriber by Id   - Delete Subscriber by Id   - Update Subscriber by Id  ### Call Operations    - List outbound Calls   - Create a Call   - Get Call by Id   - List Inbound Calls   - Generate Call Reports  ### Phone Number Operations    - List Phone Numbers  ### Webhook Operations    - List all Webhooks   - Create a Webhook   - Get Webhook by Id   - Delete Webhook by Id   - Update Webhook by Id  ## Authentication🔐 CallChimp public API offers authentication with API Keys. All endpoints accepts a header named `x-api-key`. To get started follow the below steps:    1. Login to callchimp dashboard.   2. Click on your profile on the top-right corner.   3. Click on Settings.   4. On the settings page, click on `API Keys` from the left sidebar.   5. Click on `Add new` button, add an expiry date and click on `Add`.   6. An API Key will be generated, please save the key somewhere safe as it won't be shown again!   7. You can use the API Key directly here in this playground to test out the APIs. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt
from callchimp.models.call_report_response_answered_calls import CallReportResponseAnsweredCalls
from callchimp.models.call_report_response_stats_inner import CallReportResponseStatsInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CallReportResponse(BaseModel):
    """
    CallReportResponse
    """ # noqa: E501
    answered_calls: Optional[CallReportResponseAnsweredCalls] = None
    campaigns_count: Optional[StrictInt] = None
    queued_calls: Optional[CallReportResponseAnsweredCalls] = None
    stats: Optional[List[CallReportResponseStatsInner]] = None
    total_calls: Optional[CallReportResponseAnsweredCalls] = None
    total_duration: Optional[CallReportResponseAnsweredCalls] = None
    __properties: ClassVar[List[str]] = ["answered_calls", "campaigns_count", "queued_calls", "stats", "total_calls", "total_duration"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CallReportResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of answered_calls
        if self.answered_calls:
            _dict['answered_calls'] = self.answered_calls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of queued_calls
        if self.queued_calls:
            _dict['queued_calls'] = self.queued_calls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in stats (list)
        _items = []
        if self.stats:
            for _item in self.stats:
                if _item:
                    _items.append(_item.to_dict())
            _dict['stats'] = _items
        # override the default output from pydantic by calling `to_dict()` of total_calls
        if self.total_calls:
            _dict['total_calls'] = self.total_calls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_duration
        if self.total_duration:
            _dict['total_duration'] = self.total_duration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CallReportResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answered_calls": CallReportResponseAnsweredCalls.from_dict(obj.get("answered_calls")) if obj.get("answered_calls") is not None else None,
            "campaigns_count": obj.get("campaigns_count"),
            "queued_calls": CallReportResponseAnsweredCalls.from_dict(obj.get("queued_calls")) if obj.get("queued_calls") is not None else None,
            "stats": [CallReportResponseStatsInner.from_dict(_item) for _item in obj.get("stats")] if obj.get("stats") is not None else None,
            "total_calls": CallReportResponseAnsweredCalls.from_dict(obj.get("total_calls")) if obj.get("total_calls") is not None else None,
            "total_duration": CallReportResponseAnsweredCalls.from_dict(obj.get("total_duration")) if obj.get("total_duration") is not None else None
        })
        return _obj


