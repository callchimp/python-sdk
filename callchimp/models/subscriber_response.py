# coding: utf-8

"""
    Callchimp Public API

    ## Introduction👋 Introducing OpenAPI spec for doing almost anything in [callchimp.ai](https://callchimp.ai). CallChimp is a Gen AI Call Center Enhancing telecommunication with GPT-driven bulk calling. It is scalable, user-friendly, and customizable. Optimized for seamless integration and usability. ## API Categories📋 The APIs are divided in 9 categories listed below:   - Campaigns   - Supervisors   - Lists   - Subscribers   - Calls   - Phone Numbers   - Webhooks   - Scripts   - Voices  ## API Operations✅ ### Campaign Operations    - List Campaigns   - Create a Campaign   - Get Campaign by Id   - Delete Campaign by Id   - Update Campaign by Id   - Add Supervisors to Campaign by Id   - Remove Supervisors from Campaign by Id   - Upload audio file to Campaign by Id   - Search Campaign by Name or Id  ### Supervisor Operations    - List Supervisors   - Create a Supervisor   - Get Supervisor by Id   - Delete Supervisor by Id   - Update Supervisor by Id   - Send OTP to Supervisor by Id   - Verify Supervisor OTP by Id  ### List Operations    - List Lists   - Create a List   - Get List by Id   - Delete List by Id   - Update List by Id   - Search List by Name or Id   - Create Campaign with Default List  ### Subscriber Operations    - List Subscribers   - Create one or more Subscriber(s)   - Get Subscriber by Id   - Delete Subscriber by Id   - Update Subscriber by Id   - Get Subscriber by Vendor Lead Code   - Delete Subscriber by Vendor Lead Code   - Update Subscriber by Vendor Lead Code  ### Call Operations    - List Calls   - Create a Call   - Get Call by Id   - List Supervisor Inbound Calls   - Generate Call Reports  ### Phone Number Operations    - List Phone Numbers  ### Webhook Operations    - List Webhooks   - Create a Webhook   - Get Webhook by Id   - Delete Webhook by Id   - Update Webhook by Id  ### Script Operations    - List Scripts   - Create a Script   - Get Script by Id   - Delete Script by Id   - Update Script by Id  ### Voice Operations   - List Available Voices  ## Authentication🔐 Callchimp public API offers authentication with API Keys. All endpoints accepts a header named `x-api-key`. To get started follow the below steps:    1. Login to callchimp dashboard.   2. Click on your profile on the top-right corner.   3. Click on Settings.   4. On the settings page, click on `API Keys` tab.   5. Click on `Create` button, add a name and an expiry date and click on `Add`.   6. An API Key will be generated, please save the key somewhere safe as it won't be shown again!   7. You can use the API Key directly here in this playground to test out the APIs. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SubscriberResponse(BaseModel):
    """
    SubscriberResponse
    """ # noqa: E501
    id: Optional[StrictInt] = None
    status: Optional[Annotated[str, Field(strict=True, max_length=20)]] = None
    user: Optional[Annotated[str, Field(strict=True, max_length=20)]] = None
    vendor_lead_code: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    source_id: Optional[Annotated[str, Field(strict=True, max_length=20)]] = None
    phone_code: Optional[Annotated[str, Field(strict=True, max_length=3)]] = None
    phone_number: Optional[Annotated[str, Field(strict=True, max_length=20)]] = None
    title: Optional[Annotated[str, Field(strict=True, max_length=20)]] = None
    first_name: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    middle_initial: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    last_name: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    address1: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    address2: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    address3: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    city: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    state: Optional[Annotated[str, Field(strict=True, max_length=50)]] = None
    province: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    postal_code: Optional[Annotated[str, Field(strict=True, max_length=12)]] = None
    country_code: Optional[Annotated[str, Field(strict=True, max_length=20)]] = None
    gender: Optional[Annotated[str, Field(strict=True, max_length=20)]] = None
    date_of_birth: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    alt_phone: Optional[Annotated[str, Field(strict=True, max_length=20)]] = None
    email: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    called_count: Optional[StrictInt] = 0
    rank: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    leadlist: Optional[StrictInt] = Field(default=None, description="Leadlist foreign key")
    organization: Optional[StrictInt] = Field(default=None, description="Organization foreign key")
    __properties: ClassVar[List[str]] = ["id", "status", "user", "vendor_lead_code", "source_id", "phone_code", "phone_number", "title", "first_name", "middle_initial", "last_name", "address1", "address2", "address3", "city", "state", "province", "postal_code", "country_code", "gender", "date_of_birth", "alt_phone", "email", "called_count", "rank", "leadlist", "organization"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriberResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        # set to None if vendor_lead_code (nullable) is None
        # and model_fields_set contains the field
        if self.vendor_lead_code is None and "vendor_lead_code" in self.model_fields_set:
            _dict['vendor_lead_code'] = None

        # set to None if source_id (nullable) is None
        # and model_fields_set contains the field
        if self.source_id is None and "source_id" in self.model_fields_set:
            _dict['source_id'] = None

        # set to None if phone_code (nullable) is None
        # and model_fields_set contains the field
        if self.phone_code is None and "phone_code" in self.model_fields_set:
            _dict['phone_code'] = None

        # set to None if phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.phone_number is None and "phone_number" in self.model_fields_set:
            _dict['phone_number'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['first_name'] = None

        # set to None if middle_initial (nullable) is None
        # and model_fields_set contains the field
        if self.middle_initial is None and "middle_initial" in self.model_fields_set:
            _dict['middle_initial'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['last_name'] = None

        # set to None if address1 (nullable) is None
        # and model_fields_set contains the field
        if self.address1 is None and "address1" in self.model_fields_set:
            _dict['address1'] = None

        # set to None if address2 (nullable) is None
        # and model_fields_set contains the field
        if self.address2 is None and "address2" in self.model_fields_set:
            _dict['address2'] = None

        # set to None if address3 (nullable) is None
        # and model_fields_set contains the field
        if self.address3 is None and "address3" in self.model_fields_set:
            _dict['address3'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if province (nullable) is None
        # and model_fields_set contains the field
        if self.province is None and "province" in self.model_fields_set:
            _dict['province'] = None

        # set to None if postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.postal_code is None and "postal_code" in self.model_fields_set:
            _dict['postal_code'] = None

        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict['country_code'] = None

        # set to None if gender (nullable) is None
        # and model_fields_set contains the field
        if self.gender is None and "gender" in self.model_fields_set:
            _dict['gender'] = None

        # set to None if date_of_birth (nullable) is None
        # and model_fields_set contains the field
        if self.date_of_birth is None and "date_of_birth" in self.model_fields_set:
            _dict['date_of_birth'] = None

        # set to None if alt_phone (nullable) is None
        # and model_fields_set contains the field
        if self.alt_phone is None and "alt_phone" in self.model_fields_set:
            _dict['alt_phone'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if rank (nullable) is None
        # and model_fields_set contains the field
        if self.rank is None and "rank" in self.model_fields_set:
            _dict['rank'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriberResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "user": obj.get("user"),
            "vendor_lead_code": obj.get("vendor_lead_code"),
            "source_id": obj.get("source_id"),
            "phone_code": obj.get("phone_code"),
            "phone_number": obj.get("phone_number"),
            "title": obj.get("title"),
            "first_name": obj.get("first_name"),
            "middle_initial": obj.get("middle_initial"),
            "last_name": obj.get("last_name"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "address3": obj.get("address3"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "province": obj.get("province"),
            "postal_code": obj.get("postal_code"),
            "country_code": obj.get("country_code"),
            "gender": obj.get("gender"),
            "date_of_birth": obj.get("date_of_birth"),
            "alt_phone": obj.get("alt_phone"),
            "email": obj.get("email"),
            "called_count": obj.get("called_count") if obj.get("called_count") is not None else 0,
            "rank": obj.get("rank"),
            "leadlist": obj.get("leadlist"),
            "organization": obj.get("organization")
        })
        return _obj


